name: frontend workflow

on:
  push:
    branches:
      - main
      - develop
    tags:
    - 'v*.*.*'
  pull_request:
    branches:
      - main
      - develop

jobs:
  install:
    name: Install dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          
      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
            
      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: Install dependencies
        run: npm ci

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
            
      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: Install dependencies
        run: npm ci

      - name: Run lint
        run: npm run lint
        continue-on-error: true

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
            
      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: Install dependencies
        run: npm ci
      
      - name: Cache browsers
        id: cache-browsers
        uses: actions/cache@v4
        env:
          cache-name: cache-browsers
        with:
          path: ${{ runner.temp }}/browsers
          key: ${{ runner.os }}-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-browser
      - if:  ${{ steps.cache-browsers.outputs.cache-hit != 'true'}}
        name: Install browsers
        run: |
          mkdir -p ${{ runner.temp }}/browsers
          sudo apt-get update
          sudo apt-get install -y chromium-browser firefox xvfb
          cp /usr/bin/chromium-browser ${{ runner.temp }}/browsers/
          cp /usr/bin/firefox ${{ runner.temp }}/browsers/

      - name: Set browser environment
        run: |
          export CHROME_BIN=/usr/bin/chromium-browser
          export FIREFOX_BIN=/usr/bin/firefox
          export DISPLAY=:99
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          
      - name: Run unit tests
        run: npm run test -- --browsers=ChromeHeadless --no-watch

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
            
      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: Install dependencies
        run: npm ci
      
      - name: Extract metadata
        id: meta
        run: |
          echo "REPO_NAME=${GITHUB_REPOSITORY##*/}" >> "$GITHUB_OUTPUT"
          echo "SHORT_SHA=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"
      
      - name: Extract version
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Detected version: ${VERSION}"

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push production image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKERHUB_PROJECT_NAME }}:latest
            ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKERHUB_PROJECT_NAME }}:v${{ steps.version.outputs.version }}
            ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKERHUB_PROJECT_NAME }}:${{ steps.meta.outputs.SHORT_SHA }}
          cache-from: type=local,src=/tmp/.buildx-cache

